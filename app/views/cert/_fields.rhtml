<%

@agencies = Agency.find(:all, {
	:order => 'agencies.name', 
	:conditions => @current_user.agency_level? && @current_user.agency_id ? ['agencies.id in (?)', [@current_user.agency_id, @obj.agency_id]] : nil
})

@school_agency_ids = @agencies.select { |a| a.agency_type == 'SCHOOL DISTRICT' }.collect &:id

@agency_opts = @agencies.collect { |a| [a.name, a.id] }
@department_opts = Department.find(:all, {
	:order => 'departments.name', 
	:conditions => @current_user.agency_level? && @current_user.department_id ? ['departments.id in (?)', [@current_user.department_id, @obj.department_id]] : nil
}).collect { |a| [a.name, a.id] }

%>
<%= f.tr_select :agency_id, @agency_opts, :label => 'Agency', :req => true, :include_blank => !@current_user.agency_id %>
<%= f.tr_select :department_id, @department_opts, :label => 'Department', :req => true, :include_blank => !@current_user.department_id %>
<% if !@current_user.agency_level? || !@current_user.division %>
	<tr>
		<th>Division:</th>
		<td><%= partial 'division/division_select', :f => f, :o => o, :field_name => 'obj' %></td>
	</tr>
<% end %>
<% if @current_user.agency_level? %>
	<tr>
		<th>Exam: <span class="req">*</span></th>
		<td>
			<% exams = Exam.find(:all, :conditions => 'valid_until >= date(now()) and (continuous = 0 or current_exam_id = id)', :order => 'exams.title asc, exams.established_date desc') %>
			<%= text_field_tag 'obj_exam_label', (@obj.exam ? @obj.exam.label : ''), :placeholder => 'Search For Exam...', :size => 80 %>
			<div id="exam_attr"></div>
			<%= f.hidden_field :exam_id, 'data-attr' => (@obj.exam ? {:id => @obj.exam.id, :established_date => @obj.exam.established_date, :valid_until => @obj.exam.valid_until, :cr_group => @obj.exam.cr_group, :label => @obj.exam.label} : nil).to_json %>
			<script>
				(function($) {
					var options = <%= exams.map { |e| [e.label, e.id, e.established_date, e.valid_until, e.cr_group] }.to_json %>;
					for(var i = 0; i < options.length; i++) {
						var o = options[i];
						options[i] = {value: o[0], label: o[0], id: o[1], established_date: o[2], valid_until: o[3], cr_group: o[4]};
					}
					var item_select = function(e, ui) {
						var item = ui.item;
						$('#obj_exam_id').val(item.id).data({attr: item});
						obj_exam_id_change();
						$(this).blur();
					}
					$('#obj_exam_label').autocomplete({
						source: options,
						minLength: 0,
						select: item_select
					}).focus(function(e) {
						var $this = $(this);
						if($this.autocomplete('widget').is(':visible')) {
							return;
						}
						$this.select();
						$this.data('autocomplete').search('');
					}).blur(function(e) {
						var $this = $(this);
						var attr = $('#obj_exam_id').data('attr');
						$this.val(attr ? attr.label : '');						
					}).data('autocomplete')._renderItem = function(ul, item) {
						var d1 = Date.parse(item.established_date);
						var d2 = Date.parse(item.valid_until);
						var label = item.label + '<br><span class="dim">Established Date:</span> ' + (d1 ? d1.toString('MM/dd/yyyy') : '(none)') + ' <span class="dim">Expires On:</span> ' + (d2 ? d2.toString('MM/dd/yyyy') : '(none)');
						style = ''
						if(item.label.match(/^OC3-/)) {
							style = 'color: ' + (item.cr_group == 2 ? '#880000' : '#008800') + ';';
						}
						else if(item.label.match(/^OC3B-/)) {
							style = 'color: ' + (item.cr_group == 3 ? '#880000' : '#008800') + ';';
						}
						label = '<a style="' + style + '">' + label + '</a>';
						return $('<li>').data('item.autocomplete', item).append(label).appendTo(ul);
					};
				})(jQuery);
			</script>
		</td>
	</tr>
<% else %>
	<tr>
		<th>Exam: <span class="req">*</span></th>
		<td>
			<%= partial 'pop_field', :id => 'obj_exam_label', :text => (@obj.exam ? @obj.exam.label : ''), :name => 'obj[exam_id]', :id => 'obj_exam_id', :url => popup_url({:controller => :exam}), :value => @obj.exam_id, :attr => (@obj.exam ? @obj.exam.json_attributes : nil) %>
			<div id="exam_attr"></div>
			<div>Click the field above to open a popup where you can select an existing exam.</div>
		</td>
	</tr>
<% end %>
<tr>
	<th>Existing Certs:</th>
	<td id="open_certs"></td>
</tr>
<% if false %>
	<%= f.tr_select :job_id, Job.find(:all, :order => 'jobs.name').collect { |j| [j.name, j.id] }, :include_blank => true, :label => 'Job Title' %>	
<% end %>
<% if !@current_user.agency_level? %>
	<%= f.tr_text_field :requestor, :label => 'Requestor', :class => 'ucase' , :req => true %>
	<%= f.tr_calendar_date_select :requested_date, :label => 'Requested Date', :class => 'ucase', :help => 'Date list is requested. If requested electronically by an agency user this will automatically be populated.' %>
	<%= f.tr_calendar_date_select :pending_date, :label => 'Pending Date', :class => 'ucase', :help => 'Date list is forwarded from liaison to certification specialist.' %>
	<%= f.tr_calendar_date_select :certification_date, :label => 'Certification Date', :class => 'ucase', :onchange => 'cdate_change();', :help => 'Date list is certified. Agencies will be able to enter candidate actions on/after this date.' %>	
	<%= f.tr_calendar_date_select :notified_date, :label => 'Agency Notified Date', :class => 'ucase', :help => 'Date agency is notified that the list has been certified.' %>	
	<%= f.tr_calendar_date_select :return_date, :label => 'Return Date', :onchange => 'rdate_change();', :class => 'ucase', :help => '<div id="obj_return_date_err" class="red2"></div>Date list expires and can no longer be used for hiring.' %>	
	<%= f.tr_calendar_date_select :completed_date, :label => 'Completed Date', :class => 'ucase', :help => 'Date agency completes and returns the list. Agency will no longer be able to enter candidate actions on/after this date.' %>	
	<%= f.tr_calendar_date_select :prefinished_date, :label => 'Prefinished Date', :class => 'ucase', :help => 'Date returned list is approved by liaison and sent to certification specialist.' %>	
	<%= f.tr_text_field :finished, :label => 'Finished', :class => 'ucase', :help => 'Enter initials and/or date to indicate completed list returned from agency has been reviewed and approved.' %>
	<%= f.tr_check :show_actions, :label => 'Show Actions?', :text => 'If checked, actions will be shown on the public website when exported.' %>	
<% end %>
<%= f.tr_text_field :number_of_positions, :label => 'No. Positions', :class => 'ucase', :size => 10, :req => true %>
<tr class="<%= f.err(:request_type) %>">
	<th>Request Type:<span class="req">*</span></th>
	<td>
		<label><%= f.radio_button :request_type, 'PROMOTIONAL' %> PROMOTIONAL</label>&nbsp;&nbsp;
		<label><%= f.radio_button :request_type, 'OPEN COMPETITIVE' %> OPEN COMPETITIVE</label>&nbsp;&nbsp;
		<label><%= f.radio_button :request_type, 'PREFERRED' %> PREFERRED</label>
	</td>
</tr>
<tr class="<%= f.err(:job_time) %>">
	<th>Time: <span class="req">*</span></th>
	<td>
		<% Const::JOB_TIMES.each_with_index { |t, i| %>
						<label><%= f.radio_button :job_time, t[1] %> <%= h t[0] %></label>&nbsp;&nbsp;
		 <% } %>
	</td>
</tr>
<tr id="tr_job_type" class="<%= f.err(:job_type) %>">
	<th>Job Type:<span class="req">*</span></th>
	<td>
		<label><%= f.radio_button :job_type, 'P' %> PERMANENT</label>&nbsp;&nbsp;
		<label><%= f.radio_button :job_type, 'C' %> CONTINGENT-PERMANENT</label>&nbsp;&nbsp;
		<label><%= f.radio_button :job_type, 'T' %> TEMPORARY</label>
	</td>
</tr>
<tr id="tr_temp_duration"<% if(@obj.job_type != 'T') %> style="display: none;"<% end %> class="<%= f.err(:temp_duration) %>">
	<th>Temp Duration: <span class="req">*</span></th>
	<% temp_opts = ['0-3 MONTHS', '3-6 MONTHS', '6-12 MONTHS'] %>
	<% if @obj.temp_duration.blank? || temp_opts.include?(@obj.temp_duration) %>
	<td>
		<% temp_opts.each { |t| %>
			<label><%= f.radio_button :temp_duration, t %> <%= h t %></label>
		<% } %>
	</td>
	<% else %>
		<td><%= f.text_field :temp_duration, :label => 'If Temp, Duration', :class => 'ucase' %></td>
	<% end %>
</tr>
<tr class="<%= f.err(:general_or_residential) %>">
	<th>Gen/Dept/Res: <span class="req">*</span></th>
	<td>
		<% if(@obj.general_or_residential == 'N/A') %><label><%= f.radio_button :general_or_residential, 'N/A' %>N/A</label>&nbsp;&nbsp;<% end %>
		<label><%= f.radio_button :general_or_residential, 'General' %>General</label>&nbsp;&nbsp;
		<label><%= f.radio_button :general_or_residential, 'Departmental' %>Departmental (MC Depts Only)</label>&nbsp;&nbsp;

		<label><%= f.radio_button :general_or_residential, 'Residential' %>Residential (OC Only)</label>&nbsp;&nbsp;
	</td>
</tr>
<% if false %>
	<tr>
		<th>Months: <span class="req">*</span></th>
		<td>
			<label><%= f.radio_button :months, 'N/A' %>N/A</label>&nbsp;&nbsp;

			<label><%= f.radio_button :months, '10 Month' %>10 Month</label>&nbsp;&nbsp;
			<label><%= f.radio_button :months, '11 Month' %>11 Month</label>&nbsp;&nbsp;
			<label><%= f.radio_button :months, '12 Month' %>12 Month</label>&nbsp;&nbsp;
		</td>
	</tr>
<% end %>
<%= f.tr_text_field :salary_range, :label => 'Salary Range', :class => 'ucase', :req => true %>
<% if !@current_user.agency_level? %>
	<%= f.tr_text_area :comments, :label => 'Note(s)', :class => 'ucase', :size => '80x2' %>
	<tr>
		<th>Comments:</th>
		<td>
			<div><a href="<%= popup_url(:controller => :cert_bottom_note, :action => :index) %>" id="select_obj_bottom_note" class="popup-select-text">Select Previous Entry...</a></div>
			<%= f.text_area :bottom_note, :class => 'ucase', :size => '80x3' %>
		</td>
	</tr>

	<tr>
		<th>End of List:</th>
		<td>
			<div><a href="<%= popup_url(:controller => :cert_end_of_list, :action => :index) %>" id="select_obj_end_of_list" class="popup-select-text">Select Previous Entry...</a></div>
			<%= f.text_area :end_of_list, :class => 'ucase', :size => '80x2' %>
		</td>
	</tr>
	<%= f.tr_text_field :additional, :label => 'Additional Info', :class => 'ucase' %>
	<%= f.tr_text_area :internal_notes, :label => 'Internal Notes', :class => 'ucase', :size => '80x3' %>
<% end %>
<%= f.tr_text_area :agency_comments, :label => 'Agency Comments', :class => 'ucase', :size => '80x3' %>

<script type="text/javascript">
	
	var cdate_change, rdate_change;
	
	var obj_exam_id_change;
	
	var school_agency_ids = <%= @school_agency_ids.to_json %>;
	
	(function($) {
		
		var exam_id = $('#obj_exam_id');
		var agency_select = $('#obj_agency_id');	
		var department_select = $('#obj_department_id');
		
		var check_return_date = function() {
			var attr = exam_id.data('attr');
			var rd = Date.parse($('#obj_return_date').val());
			var vu = attr && Date.parse(attr.valid_until);
			html = '';
			$('#exam_attr').removeClass('red2');
			if(rd && vu && rd > vu) {
			$('#exam_attr').addClass('red2');
				html = 'Warning! Return date is greater than exam expiration date!';
			}
			$('#obj_return_date_err').html(html);
		}
				
		var open_certs = $('#open_certs');
		var render_open_certs = function(certs) {
			var html = '';
			if(certs.length) {
				html = '<div class="red2">Other open certified lists found! Click to view:</div>';
				for(var i = 0; i < certs.length; i++) {
					var rd = Date.parse(certs[i].requested_date);
					html += '<div><a class="red2" href="<%= url_for :action => :view %>/'+ certs[i].id +'" target="_blank">' + certs[i].title + 
						', Requested: ' + (rd ? rd.toString('MM/dd/yyyy') : '(unknown)') + '</a></div>';
				}
			}
			else {
				html = '<span class="dim">(no open certified lists found for agency/department/division &amp; title)</span>';
			}
			open_certs.html(html);
		}
		render_open_certs(<%= @obj.other_open_certs_error_attr.to_json %>);
		
		var check_open_certs = function() {
			var v1 = agency_select.val();
			var v2 = exam_id.val();
			if(!v1 || !v2) {
				open_certs.html('<span class="dim">(select an agency &amp; exam to view other open certs)</span>');
				return;
			}
			open_certs.addClass('busy-bg');
			$.ajax({
				url: '<%= url_for :action => :check_open_certs, :id => o.id %>',
				data: $('#obj_department_id, #obj_agency_id, #obj_exam_id, #obj_division_id').serialize(),
				success: function(data, status, xhr) {
					render_open_certs(data);
				},
				error: function(xhr, status, error) {
				},
				complete: function(xhr, status) {
					open_certs.removeClass('busy-bg');
				},
			});
		}
		
		obj_exam_id_change = function(e) {
			var attr = exam_id.data('attr');
			html = '';
			if(attr) {
				var d1 = Date.parse(attr.established_date);
				var d2 = Date.parse(attr.valid_until);
				var d1e = !d1
				var d2e = !d2 || d2.setHours(0,0,0,0) < (new Date()).setHours(0,0,0,0);
				html = 
				'<span class="' + (d1e ? 'red2' : '') + '"><span class="dim">Established Date:</span> ' + (d1 ? d1.toString('MM/dd/yyyy') : '(none)') + '</span>&nbsp;&nbsp;&nbsp;' +
				'<span class="' + (d2e ? 'red2' : '') + '"><span class="dim">Expires On:</span> ' + (d2 ? d2.toString('MM/dd/yyyy') : '(none)') + '</span>';
			}
			else {
				html = '<span class="dim">(no exam selected)</div>'
			}
			$('#exam_attr').html(html);
			check_return_date();
			check_open_certs();
		}
		obj_exam_id_change();
		exam_id.change(obj_exam_id_change);
	
		department_row = department_select.closest('tr');
		var toggle_department = function() {
			var agency_id = parseInt(agency_select.val());
			if(school_agency_ids.indexOf(agency_id) != -1) {
				department_row.hide();
			}
			else {
				department_row.show();
			}
		}
		var set_department = function() {
			agency_name = agency_select.find(':selected').text();
			var department_options = department_select.children();
			for(var i = 0; i < department_options.length; i++) {
				if($(department_options[i]).text() == agency_name) {
					department_select[0].selectedIndex = i;
				}
			}
			toggle_department();
		}
		if(department_select[0].selectedIndex == 0) {
			set_department();
		}
		else {
			toggle_department();
		}
		agency_select.change(function(e) {
			set_department();
			check_open_certs();
		});
		department_select.change(function(e) {
			check_open_certs();
		});
		$('#obj_division_id_wrap').change(function(e) {
			check_open_certs();
		});
	
		var cdate = $('#obj_certification_date');
		var rdate = $('#obj_return_date');
		
		cdate_change = function(e) {
			var d = Date.parse(cdate.val()).add({days: 60});
			$('#obj_return_date').val(d.toString('MM/dd/yyyy')).effect('highlight');
			check_return_date();
		}		
		rdate_change = function(e) {
			check_return_date();
		}

		cdate.change(cdate_change);
		rdate.change(rdate_change);
		
		$('#tr_job_type input').click(function(e) {
			show = $('#tr_job_type input:checked').val() == 'T'
			$('#tr_temp_duration')[show ? 'show' : 'hide']();
		});
		
	})(jQuery);
	/* jQuery('#obj_exam_id').change(function(e) {
		var inp = jQuery(this);
		var val = inp.val();
		inp.addClass('busy-bg');
		jQuery.ajax({
			url: root_url + 'exam/get_job/'+ val,
			data: {id: val},
			complete: function(xhr, status) {
			},
			success: function(data, status, xhr) {
				inp.removeClass('busy-bg');
				jQuery('#obj_job_id').val(data.id);

			},
			error: function(xhr, status, error) {
				alert('Error setting action.');
			}
		});
	}); */

</script>