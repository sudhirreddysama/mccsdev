<div class="tabs buttons">
	<% if((@current_user.staff_level? || @current_user.liaison_level? || @obj.status != 'requested') && !params[:popup]) %>
		<%= tab 'Printable Version', {:action => :print, :id => @obj.id}, {}, :target => '_blank' %>
		<%= tab 'Export to Excel', {:action => :excel, :id => @obj.id}, {}, :target => '_blank' %>
		<% if @obj.status == 'certified' && @current_user.staff_level? %>
			<% users = @obj.agency ? @obj.agency.get_users(@obj.department).collect(&:username).join(', ') : '' %>
			<% users = '(no users)' if users.blank? %>
			<%= tab 'Notify Agency' + (@obj.notified_date ? " (Sent #{@obj.notified_date.d0})" : ''), {:action => :notify_agency, :id => @obj.id}, {}, :confirm => "Send email to all users in this agency that certified list is available?\n\nUsers are: " + users, :class => 'tab-delivery' %>
		<% end %>
		<% if (@obj.status == 'requested' && (@current_user.staff_level? || @current_user.liaison_level?))  %>
			<%= tab 'Notify Certification Specialist', {:action => :notify_specialist, :id => @obj.id}, {}, :confirm => 'Send email to cerification specialist? This will change the status to "pending".', :class => 'tab-delivery' %>
		<% end %>
		<% if (@obj.status == 'completed' && !@obj.prefinished_date && (@current_user.staff_level? || @current_user.liaison_level?))  %>
			<%= tab 'Notify Certification Specialist (Completed)', {:action => :notify_specialist, :id => @obj.id}, {}, :confirm => 'Send email to cerification specialist to finish this certification?', :class => 'tab-delivery' %>
		<% end %>
		<% if @current_user.username == 'isadmin' %>
			<a data-popup-title="Approvals/Messages/Send To..." href="<%= url_for({:popup => true, :sc => :cert, :sid => @obj.id, :controller => :notice}) %>" class="tab tab-delivery popup"><span>Approvals/Messages/Send To...</span></a>
		<% end %>
		<% if @current_user.staff_level? %>
			<%= tab 'Recertify', {:action => :recertify, :id => @obj.id}, {}, {:confirm => 'Create new Certified List with same applicants? All properties of the new certified list will remain the same, except the certification date, return date, completed date, and finished field, which will be cleared.', :method => :post, :class => 'tab-duplicate'} %>
		<% end %>
	<% end %>
	<div class="clear"></div>
</div>

<% if((@obj.status == 'certified' || @obj.status == 'overdue') && @obj.certification_date <= Time.now.to_date) %>
	<% if @current_user.level == 'agency-head' || @current_user.level == 'liaison' || @current_user.level == 'admin' %>
		<a href="#" onclick="jQuery('#complete').toggle();" style="color: #fff; background-color: #080; margin: 5px 5px 0 5px; padding: 5px; display: block; text-decoration: none; text-align: center;">
			This certified list has yet to be completed and submitted to Monroe County HR. Click here to submit to MC HR Liaison.
		</a>
		<div id="complete" style="text-align: center; display: none; margin: 0 5px 0 5px; border: 1px solid #080; border-top: none; padding: 5px;">
			<%= form_tag :action => :complete_list, :id => @obj.id %>
				<div>NOTE: Candidate actions are required! Make sure one is selected for each candidate or you will not be able to continue. Once the list is completed and submitted to MC HR Liaison actions cannot be changed.</div>
				<%= submit_tag 'Electronically Submit List' %>
			</form>
		</div> 
	<% else %>
		<div style="text-align: center; margin: 5px; padding: 5px; background-color: #080; color: #fff;">This certified list is now editable. Please enter all candidate actions and have an agency head submit the list to MC HR Liaison.</div>
	<% end %>
<% end %>

<% @pref_list = PreferredList.find(:first, :conditions => ['status != "exhausted" and job_id = ? and agency_id = ? and department_id = ?', @obj.job_id, @obj.agency_id, @obj.department_id]) %>
<% if @obj.exam && @obj.exam.job && @obj.exam.exam_type == 'OC' %>
	<% @prom_list = Exam.find(:first, :conditions => ['exam_type = "PROM" and established_date <= date(now()) and valid_until >= date(now()) and job_id = ?', @obj.exam.job_id]) %>
	<% if @prom_list %>
		<%= link_to('This certified list is for an open competitive exam but a promotional list exists for this job title! Click here to view exam', {:sc => nil, :sid => nil, :controller => 'exam', :action => :view, :id => @prom_list.id}, :style => 'display: block; margin: 5px; padding: 5px; background-color: #800; text-align: center; color: #fff; text-decoration: none; font-weight: bold;')%>
	<% end %>
<% end %>
<% if @pref_list %>
	<%= link_to('Preferred list exists for this job/agency/department! Click here to view', {:sc => nil, :sid => nil, :controller => 'preferred_list', :action => :view, :id => @pref_list.id}, :style => 'display: block; margin: 5px; padding: 5px; background-color: #800; text-align: center; color: #fff; text-decoration: none; font-weight: bold;')%>
<% end %>
<div class="viewer">
	<div class="header">General Info.</div>
	<div class="row">
		<table>
			<tr>
				<td>
					<label>ID:</label>
					<%= o.id %>
				</td>
				<td>
					<label>Status:</label>
					<%= cert_status o.status %>
				</td>
				<td>
					<label>Title:</label>
					<%= h o.set_title %>
				&nbsp;</td>
				<td>
					<label>Add'l Info:</label>
					<%= o.additional %>
				</td>
				<% if o.recert_from %>
					<td>
						<label>Recertified From:</label>
						<%= link_to o.recert_from_id, :action => :view, :id => o.recert_from_id %>
					</td>
				<% end %>
				<% if !o.recerts.empty? %>
					<td>
						<label>Recertified To:</label>
						<% o.recerts.each { |r| %>
							<%= link_to r.id, :action => :view, :id => r.id %>&nbsp;&nbsp;&nbsp;
						<% } %>
					</td>
				<% end %>
			</tr>
		</table>
	</div>
	<div class="row">
		<table>
			<tr>
				<% if params[:popup] %>
					<td>
						<label>Exam No.:</label>
						<%= o.exam.exam_no if o.exam %>
					</td>
					<td>
						<label>Exam Title:</label>
						<%= o.exam.title if o.exam %>
					</td>
					<td>
						<%= o.job.name if o.job %>
					&nbsp;</td>
				<% else %>
					<td>
						<label>Exam No.:</label>
						<%= link_to(o.exam.exam_no, :controller => :exam, :action => :view, :id => o.exam_id) if o.exam %>
					</td>
					<td>
						<label>Exam Title (links to exam record):</label>
						<%= link_to(o.exam.title, :controller => :exam, :action => :view, :id => o.exam_id) if o.exam %>
					</td>
					<td>
						<% if @current_user.agency_level? %>
							<label>Title of Position (links to title record):</label>
							<%= link_to(o.job.name, :controller => :job, :action => :view, :id => o.job_id) if o.job %>
						<% else %>
							<label>Title of Position (links to title record):</label>
							<%= link_to(o.job.name, :controller => :job, :action => :view, :id => o.job_id) if o.job %>
						<% end %>
					&nbsp;</td>
				<% end %>
			</tr>
		</table>
	</div>
	
	<div class="row">
		<table>
			<tr>
				<td>
					<label>Department:</label>
					<%= o.department.name if o.department %>
				</td>
				<td>
					<label>Agency:</label>
					<%= h o.agency.name if o.agency %>
				</td>
				<td>
					<label>Request Type:</label>
					<%= h o.request_type %>
				&nbsp;</td>
			</tr>
		</table>
	</div>
	
	<div class="row">
		<table>
			<tr>
				<td>
					<label>Requested Date:</label>
					<%= o.requested_date.d0? %>
				</td>
				<td>
					<label>Pending Date:</label>
					<%= o.pending_date.d0? %>
				</td>
				<td>
					<label>Cert. Date:</label>
					<%= o.certification_date.d0? %>
				</td>
				<td>
					<label>Agency Notified Date:</label>
					<%= o.notified_date.d0? %>
				</td>
				<td>
					<label>Return Date:</label>
					<%= h o.return_date.d0? %>
				</td>
				<td>
					<label>Completed Date:</label>
					<%= h o.completed_date.d0? %>
				</td>
				<td>
					<label>Completed By:</label>
					<%= h o.completed_by.name if o.completed_by %>
				</td>
				<td>
					<label>Prefinished Date:</label>
					<%= h o.prefinished_date.d0? %>
				</td>
				<td>
					<label>Finished:</label>
					<%= h o.finished %>
				&nbsp;</td>
			</tr>
		</table>
	</div>
	
	<div class="row">
		<table>
			<tr>
				<td>
					<label># Positions:</label>
					<%= h o.number_of_positions %>
				</td>
				<td>
					<label>Salary Range:</label>
					<%= h o.salary_range %>
				</td>				
				<td>
					<label>Job Type:</label>
					<%= h o.job_type %>
				</td>
				<td>
					<label>Time:</label>
					<%= h o.job_time %>
				</td>
				<td>
					<label>If Temp, Duration:</label>
					<%= h o.temp_duration %>
				</td>
				<% if !o.months.blank? %>
					<td>
						<label>Months:</label>
						<%= h o.months %>
					</td>
				<% end %>
				<td>
					<label>General/Residential:</label>
					<%= h o.general_or_residential %>
				&nbsp;</td>
			</tr>
		</table>
	</div>
	
	<div class="row">
		<table>
			<tr>
				<td>
					<label>Requestor:</label>
					<%= h [o.requestor, o.line2, o.line3].reject(&:blank?).join(', ') %>
				&nbsp;</td>
		</table>
	</div>
	
	<div class="row">
		<table>
			<tr>
				<td>
					<label>Note(s):</label>
					<%= nl2br_h o.comments %>
				&nbsp;</td>
			</tr>
		</table>
	</div>
	
	<div class="row"<% unless o.bottom_note.blank? %> style="background-color: #ffc; font-weight: bold;"<% end %>>
		<table>
			<tr>
				<td>
					<label>Comments:</label>
					<%= nl2br_h o.bottom_note %>
				&nbsp;</td>
			</tr>
		</table>
	</div>
	
	<div class="row">
		<table>
			<tr>
				<td>
					<label>End of List:</label>
					<%= h o.end_of_list %>
				&nbsp;</td>
			</tr>
		</table>
	</div>
	 <div class="row">
		<table>
			<tr>
				<td>
					<label>Agency Comments:</label>
					<%= nl2br_h o.agency_comments %>
					&nbsp;</td>
			</tr>
		</table>
	</div>
	<% if @current_user.staff_level? %>
		 <div class="row">
			<table>
				<tr>
					<td>
						<label>Internal Notes:</label>
						<%= nl2br_h o.internal_notes %>
						&nbsp;</td>
				</tr>
			</table>
		</div>	
	<% end %>
</div>


<% if(!params[:popup]) %>


<%

@applicants = @obj.cert_applicants.find(:all, {
	:include => [{:applicant => [:person, :exam]}, :cert_code],
	:order => 'applicants.final_score desc, applicants.tiebreaker desc'
})

@cert_codes = CertCode.find(:all, {
	:order => 'cert_codes.description',
	:conditions => (@current_user.agency_level? ? 'cert_codes.agency_option = 1 and' : '') + ' cert_codes.archived = 0'
}).collect { |c| [c.description, c.id] }

@app_statuses = AppStatus.find(:all, :order => 'app_statuses.description').collect { |s| [s.description, s.id] }

%>
<% if @current_user.staff_level? || (@obj.status != 'requested' && @obj.status != 'pending') %>
	<% if @current_user.staff_level? || @current_user.liaison_level? || (@current_user.agency_level? && (@obj.status == 'certified' || @obj.status == 'overdue') && @obj.certification_date <= Time.now.to_date) %>
		<table class="dg">
			<thead>
				<tr>
				<th width="100%;" style="text-align: center;">Apply this action to entire list: <%= select_tag 'action_all', options_for_select([['Action...', nil]] + @cert_codes) %>&nbsp;&nbsp;&nbsp;</th>
				</tr>
			</thead>
		</table>
	<% end %>
	<table class="dg">
		<thead>
			<tr>
				<th width="1%">#</th>
				<th width="48%">Name &amp;<br />Address</th>
				<th width="1%" style="text-align: right;">Final<br />Score</th>
				<th width="1%" style="text-align: right;">VC</th>
				<th width="49%">Report of Action / Salary /<br />Effective Date</th>
      </tr>
		</thead>
		<tbody id="objs">
			<% @applicants.each_with_index { |ca, i| 
				
			a = ca.applicant
			p = a.person
			e = a.exam
			c = ca.cert_code
			
			%>
				<tr class="<%= cycle 'odd', 'even' %>">
					<td><div style="position: relative;"><a name="ca-<%= ca.id %>" style="position: absolute; top: -50px;"></a><%= i + 1 %>.</div></td>
					<td>
						<% if @current_user.agency_level? %>
							<%= link_to "#{p.last_name} #{p.first_name}", {:controller => :cert, :action => :view_applicant, :id => @obj.id, :id2 => ca.id}, :target => '_blank' %>
						<% else %>
							<%= link_to "#{p.last_name} #{p.first_name}", {:controller => :applicant, :action => :view, :id => a.id}, :target => '_blank' %>
						<% end %>
						&nbsp;<br />
						<%= h p.mailing_address %>&nbsp;<br />
						<% unless p.mailing_address2.blank? %>
							<%= h p.mailing_address2 %>&nbsp;<br />
						<% end %>
						<%= h p.mailing_city %>, <%= h p.mailing_state %> <%= h p.mailing_zip %>&nbsp;<br />
						<% unless p.home_phone.blank? %>
							<%= h phone_format(p.home_phone) %> (home)&nbsp;<br />
						<% end %>
						<% if false %>
							<% unless p.work_phone.blank? %>
								<%= h p.work_phone %> (work)&nbsp;<br />
							<% end %>
							<% unless p.fax.blank? %>
								<%= h p.fax %> (fax)&nbsp;<br />
							<% end %>
							<% unless p.cell_phone.blank? %>
								<%= h p.cell_phone %> (cell)&nbsp;<br />
							<% end %>
							<% unless p.email.blank? %>
								<%= h p.email %>&nbsp;<br />
							<% end %>
						<% end %>
						Eligibility Expires: <%= e.valid_until.d0? %>&nbsp;<br />
						&nbsp;<br />
					</td>
					<td style="text-align: right;"><%= a.final_score %></td>
					<td style="text-align: right;">
						<% if a.veterans_credits.to_f > 0 %>
							<%= a.veterans_credits %>
							<div style="font-size: 10px; color: #444; white-space: nowrap;">(have been<br>added to<br>final score)</div>
						<% end %>
					</td>
					<td>
						<% if @current_user.staff_level? || @current_user.liaison_level? || (@current_user.agency_level? && (@obj.status == 'certified' || @obj.status == 'overdue') && @obj.certification_date <= Time.now.to_date) %>
							<table>
								<tr>
									<td class="nobr">Action:</td><%
									
									# If an action is already selected but it's not in our list of cert codes, don't let them edit it.
									allow_action_edit = true
									opts = @cert_codes
									if(ca.cert_code && !@cert_codes.rassoc(ca.cert_code.id))
										if @current_user.agency_level?
											# Here because a non-agency user set the action, so we're going to deny the agency user editing rights for this one person.
											allow_action_edit = false
										else
											# Unlikely to ever get here since non-agency users should have all the cert codes available. Actually this is possible if it's an archived action.
											opts = [[ca.cert_code.description, ca.cert_code.id]] + opts
										end
									end
									
									%>
									<% if allow_action_edit %>
										<td><%= select_tag "actions[#{ca.id}]", options_for_select([[]] + opts, ca.cert_code_id), :style => 'width: 300px;', :class => 'ca-action', :id => "actions-#{ca.id}" %></td>
									<% else %>
										<td><%= ca.cert_code.description %></td>
									<% end %>
								</tr>
								<tr>
									<td class="nobr">Status:</td>
									<% if @current_user.agency_level? %>
										<td><%= ca.applicant.app_status.name %></td>
									<% else %>
										<td><%= select_tag "statuses[#{ca.id}]", options_for_select([[]] + @app_statuses, ca.applicant.app_status_id), :style => 'width: 300px;', :class => 'ca-status', :id => "status-#{ca.id}" %></td>
									<% end %>
								</tr>
								<tr>
									<td class="nobr">Salary:</td>
									<% if allow_action_edit %>
										<td style="white-space: nowrap;"><%
											use_mask = ca.comments.blank? || ca.comments =~ /^\$?[0-9,]*(\.\d\d)?$/									
											%><%= text_field_tag "comments[#{ca.id}]", ca.comments, :style => 'width: 100px;', :style => 'text-align: right;', :class => 'ca-comment ucase' + (use_mask ? ' money-mask' : '' ), :id => "comment-#{ca.id}" %>
											Per <%= select_tag "salary_per[#{ca.id}]", options_for_select([['', '']] + Const::WAGE_UNITS, ca.salary_per), :class => 'ca-salary_per', :id => "salary_per-#{ca.id}" %>
										</td>
									<% else %>
										<td><%= h ca.comments %> <%= (' / ' + Const::WAGE_UNITS.rassoc(ca.salary_per)[0]) rescue nil %></td>
									<% end %>
								</tr>
								<tr>
									<td class="nobr">Effective Date:</td>
									<% if allow_action_edit %>
										<td>
											<% if @current_user.staff_level? %>
												<div class="right">
													<%= link_to 'others', {:controller => 'cert', :action => :other_certs, :id => @obj.id, :id2 => ca.id}, :class => 'popup', 'data-popup-title' => 'Other Certified Lists' %>
													<%= link_to 'log', {:controller => 'cert_applicant', :action => :change_log, :id => ca.id}, :class => 'popup', 'data-popup-title' => 'Change Log' %>
												</div>
											<% end %>
											<%= calendar_date_select_tag "action_dates[#{ca.id}]", ca.action_date, :style => 'width: 100px;', :class => 'ca-date ucase', :id => "date-#{ca.id}", :onchange => 'date_change(this)' %>
										</td> 
									<% else %>
										<td><%= ca.action_date.d0? %></td>
									<% end %>
								</tr>
								<% if !ca.documents.empty? %>
									<tr>
										<td>Documents:</td>
										<td class="nobr">
											<div id="documents-<%= ca.id %>">
												<% ca.documents.each { |d| %>
													<% @ca = ca %>
													<%= partial 'ca_document', :d => d %>
												<% } %>
											</div>
											<% if false %>
												<%= form_tag({:action => :cert_upload, :id => @obj.id, :id2 => ca.id}, {:class => 'cert_upload', :multipart => true}) %>
													<%= file_field_tag 'upload' %> <%= submit_tag 'Upload' %>
												</form>
											<% end %>
										</td>
									</tr>
								<% end %>
							</table>
						<% else %>
							<% if c %>
								<%= c.description %>&nbsp;<br />
							<% end %>
							<% if !ca.comments.blank? && (!c || (c.description != ca.comments)) %>
								<%= h ca.comments %> <%= (' / ' + Const::WAGE_UNITS.rassoc(ca.salary_per)[0]) rescue nil %>&nbsp;<br />
							<% end %>
							<% if ca.action_date %>
								<%= ca.action_date.d0? %>
							<% end %>					
							<% ca.documents.each { |d| %>
								<%= link_to d.filename, {:action => :ca_download, :id => @obj.id, :id2 => ca.id, :id3 => d.id}, :target => '_blank' %> 
							<% } %>
						<% end %>
					</td>
				</tr>
			<% } %>
		</tbody>
	</table>
<% end %>
<script type="text/javascript">
	
	var doc_delete;
	var date_change;
	
	(function($) {
	
		doc_delete = function(ca_id, cad_id) {
			var div = $('#cadoc-' + cad_id);
			div.addClass('busy-bg');
			if(confirm('Are you sure you want to delete this document?')) {
				$.ajax({
					url: root_url + 'cert/document_delete/<%= @obj.id %>/' + ca_id,
					data: {id3: cad_id},
					complete: function() {
						div.removeClass('busy-bg');
					},
					success: function() {
						div.remove();
					},
					error: function() {
						alert('Error deleting document.');
					}
				});
			}
			else {
				div.removeClass('busy-bg');
			}
		}
		
		$('.cert_upload').each(function(i, form) {
			var f = $(form)
			f.ajaxForm({
				beforeSubmit: function(data, form, options) {
					f.addClass('busy-bg');
				},
				success: function(data, status, xhr, form) {
					f.prev().append(data);
				},
				complete: function(xhr, status) {
					f.removeClass('busy-bg');
				},
				error: function(xhr, status, error, form) {
					alert('Error uploading document.');
				}
			});
		});
		
		$('.ca-action').change(function(e) {
			var inp = $(this);
			var id = inp.attr('id').split('-')[1];
			var val = inp.val();
			inp.addClass('busy-bg');
			$.ajax({
				url: root_url + 'cert/set_action/<%= @obj.id %>/'+ id,
				data: {act: val},
				complete: function(xhr, status) {
				},
				success: function(data, status, xhr) {
                    inp.removeClass('busy-bg');

                },
				error: function(xhr, status, error) {
					alert('Error setting action.');
				}
			});
		});
		$('#action_all').change(function(e) {
			var inp = $(this);
			var val = inp.val();
			if(!confirm('Are you sure you want to set this action for everyone?')) {
				inp.val('');
				return;
			}
			inp.addClass('busy-bg');
			$.ajax({
				url: root_url + 'cert/set_action_all/<%= @obj.id %>/'+val,
				data: {act: val},
				complete: function(xhr, status) {
				},
				success: function(data, status, xhr) {
					inp.removeClass('busy-bg');
					window.location.href = $(location).attr('href');
				},
				error: function(xhr, status, error) {
					inp.removeClass('busy-bg');
					alert('Error setting action.');
				}
			});
		});
		$('.ca-status').change(function(e) {
			var inp = $(this);
			var id = inp.attr('id').split('-')[1];
			var val = inp.val();
			inp.addClass('busy-bg');
			$.ajax({
				url: root_url + 'cert/set_status/<%= @obj.id %>/'+ id,
				data: {sta: val},
				complete: function(xhr, status) {

				},
				success: function(data, status, xhr) {
                    inp.removeClass('busy-bg');
				},
				error: function(xhr, status, error) {
					alert('Error setting status.');
				}
			});
		});
		
		$('.ca-comment').change(function(e) {
			var inp = $(this);
			var id = inp.attr('id').split('-')[1];
			var val = inp.val();
			if(val == '$0') {
				val = '';
				inp.val('');
			}
			inp.addClass('busy-bg');
			$.ajax({
				url: root_url + 'cert/set_comments/<%= @obj.id %>/'+ id,
				data: {cmt: val},
				complete: function(xhr, status) {

				},
				success: function(data, status, xhr) {
                    inp.removeClass('busy-bg');
				},
				error: function(xhr, status, error) {
					alert('Error setting action.');
				}
			});
		});
		
		$('.ca-salary_per').change(function(e) {
			var inp = $(this);
			var id = inp.attr('id').split('-')[1];
			var val = inp.val();
			inp.addClass('busy-bg');
			$.ajax({
				url: root_url + 'cert/set_salary_per/<%= @obj.id %>/'+ id,
				data: {salary_per: val},
				complete: function(xhr, status) {

				},
				success: function(data, status, xhr) {
					inp.removeClass('busy-bg');
				},
				error: function(xhr, status, error) {
					alert('Error setting salary per.');
				}
			});
		});
		
		var cert_date = <%= o.certification_date.to_json %>;
		var return_date = <%= o.return_date.to_json %>;
		var allow_bad_dates = <%= @current_user.agency_level? ? 'false' : 'true' %>;
		
		if(cert_date) {
			cert_date = Date.parse(cert_date);
		}
		if(return_date) {
			return_date = Date.parse(return_date);
		}
		
		date_change = function(inp) {
			inp = $(inp);
			var id = inp.attr('id').split('-')[1];
			var val_date = Date.parse(inp.val());
			if(val_date && !allow_bad_dates) {
				if(cert_date && val_date < cert_date) {
					alert('Date entered is before certification date! Invalid entry.');
					val_date = null;
				}
				if(return_date && val_date > return_date) {
					alert('Date entered is after return date! Invalid entry.');
					val_date = null;
				}
			}
			val = val_date ? val_date.toString('MM/dd/yyyy') : '';
			inp.val(val);
			inp.addClass('busy-bg');
			$.ajax({
				url: root_url + 'cert/set_date/<%= @obj.id %>/'+ id,
				data: {dte: val},
				complete: function(xhr, status) {
					inp.removeClass('busy-bg');
				},
				success: function(data, status, xhr) {
        	
				},
				error: function(xhr, status, error) {
					alert('Error setting action.');
				}
			});
		}
		
		$('.money-mask').inputmask({alias: 'numeric', groupSeparator: ',', autoGroup: true, digits: 2, digitsOptional: true, prefix: '$', placeholder: '0'});
		
		var anchor = window.location.hash.substr(1);
		if(anchor.indexOf('ca-') == 0) {
			$('[name="' + anchor + '"]').closest('tr').effect('highlight', {duration: 2000});
		}
		
	})(jQuery);
	
	// Test Comment.
	
</script>

<% end %>